// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/apis/proto/mapbatch/v1/mapbatch.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MapBatch_MapBatchFn_FullMethodName = "/mapbatch.v1.MapBatch/MapBatchFn"
	MapBatch_IsReady_FullMethodName    = "/mapbatch.v1.MapBatch/IsReady"
)

// MapBatchClient is the client API for MapBatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapBatchClient interface {
	// MapBatchFn applies a function to mulitple elements at once
	MapBatchFn(ctx context.Context, in *MapBatchRequest, opts ...grpc.CallOption) (*MapBatchResponse, error)
	// IsReady is the heartbeat endpoint for gRPC.
	IsReady(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadyResponse, error)
}

type mapBatchClient struct {
	cc grpc.ClientConnInterface
}

func NewMapBatchClient(cc grpc.ClientConnInterface) MapBatchClient {
	return &mapBatchClient{cc}
}

func (c *mapBatchClient) MapBatchFn(ctx context.Context, in *MapBatchRequest, opts ...grpc.CallOption) (*MapBatchResponse, error) {
	out := new(MapBatchResponse)
	err := c.cc.Invoke(ctx, MapBatch_MapBatchFn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapBatchClient) IsReady(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, MapBatch_IsReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapBatchServer is the server API for MapBatch service.
// All implementations must embed UnimplementedMapBatchServer
// for forward compatibility
type MapBatchServer interface {
	// MapBatchFn applies a function to mulitple elements at once
	MapBatchFn(context.Context, *MapBatchRequest) (*MapBatchResponse, error)
	// IsReady is the heartbeat endpoint for gRPC.
	IsReady(context.Context, *empty.Empty) (*ReadyResponse, error)
	mustEmbedUnimplementedMapBatchServer()
}

// UnimplementedMapBatchServer must be embedded to have forward compatible implementations.
type UnimplementedMapBatchServer struct {
}

func (UnimplementedMapBatchServer) MapBatchFn(context.Context, *MapBatchRequest) (*MapBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapBatchFn not implemented")
}
func (UnimplementedMapBatchServer) IsReady(context.Context, *empty.Empty) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (UnimplementedMapBatchServer) mustEmbedUnimplementedMapBatchServer() {}

// UnsafeMapBatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapBatchServer will
// result in compilation errors.
type UnsafeMapBatchServer interface {
	mustEmbedUnimplementedMapBatchServer()
}

func RegisterMapBatchServer(s grpc.ServiceRegistrar, srv MapBatchServer) {
	s.RegisterService(&MapBatch_ServiceDesc, srv)
}

func _MapBatch_MapBatchFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapBatchServer).MapBatchFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapBatch_MapBatchFn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapBatchServer).MapBatchFn(ctx, req.(*MapBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapBatch_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapBatchServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapBatch_IsReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapBatchServer).IsReady(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MapBatch_ServiceDesc is the grpc.ServiceDesc for MapBatch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapBatch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mapbatch.v1.MapBatch",
	HandlerType: (*MapBatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapBatchFn",
			Handler:    _MapBatch_MapBatchFn_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _MapBatch_IsReady_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/proto/mapbatch/v1/mapbatch.proto",
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/mapbatch/v1 (interfaces: MapBatchClient,MapBatch_MapBatchFnClient)

// Package mapbatchmock is a generated GoMock package.
package mapbatchmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/map/v1"
	v10 "github.com/numaproj/numaflow-go/pkg/apis/proto/mapbatch/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMapBatchClient is a mock of MapBatchClient interface.
type MockMapBatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockMapBatchClientMockRecorder
}

// MockMapBatchClientMockRecorder is the mock recorder for MockMapBatchClient.
type MockMapBatchClientMockRecorder struct {
	mock *MockMapBatchClient
}

// NewMockMapBatchClient creates a new mock instance.
func NewMockMapBatchClient(ctrl *gomock.Controller) *MockMapBatchClient {
	mock := &MockMapBatchClient{ctrl: ctrl}
	mock.recorder = &MockMapBatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapBatchClient) EXPECT() *MockMapBatchClientMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockMapBatchClient) IsReady(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockMapBatchClientMockRecorder) IsReady(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockMapBatchClient)(nil).IsReady), varargs...)
}

// MapBatchFn mocks base method.
func (m *MockMapBatchClient) MapBatchFn(arg0 context.Context, arg1 *v10.MapBatchRequest, arg2 ...grpc.CallOption) (v10.MapBatch_MapBatchFnClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MapBatchFn", varargs...)
	ret0, _ := ret[0].(v10.MapBatch_MapBatchFnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapBatchFn indicates an expected call of MapBatchFn.
func (mr *MockMapBatchClientMockRecorder) MapBatchFn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapBatchFn", reflect.TypeOf((*MockMapBatchClient)(nil).MapBatchFn), varargs...)
}

// MockMapBatch_MapBatchFnClient is a mock of MapBatch_MapBatchFnClient interface.
type MockMapBatch_MapBatchFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockMapBatch_MapBatchFnClientMockRecorder
}

// MockMapBatch_MapBatchFnClientMockRecorder is the mock recorder for MockMapBatch_MapBatchFnClient.
type MockMapBatch_MapBatchFnClientMockRecorder struct {
	mock *MockMapBatch_MapBatchFnClient
}

// NewMockMapBatch_MapBatchFnClient creates a new mock instance.
func NewMockMapBatch_MapBatchFnClient(ctrl *gomock.Controller) *MockMapBatch_MapBatchFnClient {
	mock := &MockMapBatch_MapBatchFnClient{ctrl: ctrl}
	mock.recorder = &MockMapBatch_MapBatchFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapBatch_MapBatchFnClient) EXPECT() *MockMapBatch_MapBatchFnClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMapBatch_MapBatchFnClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMapBatch_MapBatchFnClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMapBatch_MapBatchFnClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMapBatch_MapBatchFnClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMapBatch_MapBatchFnClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMapBatch_MapBatchFnClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMapBatch_MapBatchFnClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMapBatch_MapBatchFnClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMapBatch_MapBatchFnClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMapBatch_MapBatchFnClient) Recv() (*v1.MapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.MapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMapBatch_MapBatchFnClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMapBatch_MapBatchFnClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockMapBatch_MapBatchFnClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMapBatch_MapBatchFnClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMapBatch_MapBatchFnClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockMapBatch_MapBatchFnClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMapBatch_MapBatchFnClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMapBatch_MapBatchFnClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockMapBatch_MapBatchFnClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMapBatch_MapBatchFnClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMapBatch_MapBatchFnClient)(nil).Trailer))
}

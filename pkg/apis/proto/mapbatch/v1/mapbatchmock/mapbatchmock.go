// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/numaproj/numaflow-go/pkg/apis/proto/mapbatch/v1 (interfaces: MapBatchClient)

// Package mapbatchmock is a generated GoMock package.
package mapbatchmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/numaproj/numaflow-go/pkg/apis/proto/map/v1"
	v10 "github.com/numaproj/numaflow-go/pkg/apis/proto/mapbatch/v1"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMapBatchClient is a mock of MapBatchClient interface.
type MockMapBatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockMapBatchClientMockRecorder
}

// MockMapBatchClientMockRecorder is the mock recorder for MockMapBatchClient.
type MockMapBatchClientMockRecorder struct {
	mock *MockMapBatchClient
}

// NewMockMapBatchClient creates a new mock instance.
func NewMockMapBatchClient(ctrl *gomock.Controller) *MockMapBatchClient {
	mock := &MockMapBatchClient{ctrl: ctrl}
	mock.recorder = &MockMapBatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapBatchClient) EXPECT() *MockMapBatchClientMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockMapBatchClient) IsReady(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*v1.ReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*v1.ReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockMapBatchClientMockRecorder) IsReady(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockMapBatchClient)(nil).IsReady), varargs...)
}

// MapBatchFn mocks base method.
func (m *MockMapBatchClient) MapBatchFn(arg0 context.Context, arg1 *v10.MapBatchRequest, arg2 ...grpc.CallOption) (*v1.MapResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MapBatchFn", varargs...)
	ret0, _ := ret[0].(*v1.MapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapBatchFn indicates an expected call of MapBatchFn.
func (mr *MockMapBatchClientMockRecorder) MapBatchFn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapBatchFn", reflect.TypeOf((*MockMapBatchClient)(nil).MapBatchFn), varargs...)
}
